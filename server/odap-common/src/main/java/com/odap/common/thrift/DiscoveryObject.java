/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.odap.common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DiscoveryObject implements org.apache.thrift.TBase<DiscoveryObject, DiscoveryObject._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DiscoveryObject");

  private static final org.apache.thrift.protocol.TField DISCOVERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("discovery_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("percentage", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DiscoveryObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DiscoveryObjectTupleSchemeFactory());
  }

  public int discovery_id; // required
  public String operator; // required
  public String name; // required
  public String value; // required
  public double percentage; // required
  public String category; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DISCOVERY_ID((short)1, "discovery_id"),
    OPERATOR((short)2, "operator"),
    NAME((short)3, "name"),
    VALUE((short)4, "value"),
    PERCENTAGE((short)5, "percentage"),
    CATEGORY((short)6, "category");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DISCOVERY_ID
          return DISCOVERY_ID;
        case 2: // OPERATOR
          return OPERATOR;
        case 3: // NAME
          return NAME;
        case 4: // VALUE
          return VALUE;
        case 5: // PERCENTAGE
          return PERCENTAGE;
        case 6: // CATEGORY
          return CATEGORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISCOVERY_ID_ISSET_ID = 0;
  private static final int __PERCENTAGE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DISCOVERY_ID, new org.apache.thrift.meta_data.FieldMetaData("discovery_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("percentage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DiscoveryObject.class, metaDataMap);
  }

  public DiscoveryObject() {
  }

  public DiscoveryObject(
    int discovery_id,
    String operator,
    String name,
    String value,
    double percentage,
    String category)
  {
    this();
    this.discovery_id = discovery_id;
    setDiscovery_idIsSet(true);
    this.operator = operator;
    this.name = name;
    this.value = value;
    this.percentage = percentage;
    setPercentageIsSet(true);
    this.category = category;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DiscoveryObject(DiscoveryObject other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.discovery_id = other.discovery_id;
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    this.percentage = other.percentage;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
  }

  public DiscoveryObject deepCopy() {
    return new DiscoveryObject(this);
  }

  @Override
  public void clear() {
    setDiscovery_idIsSet(false);
    this.discovery_id = 0;
    this.operator = null;
    this.name = null;
    this.value = null;
    setPercentageIsSet(false);
    this.percentage = 0.0;
    this.category = null;
  }

  public int getDiscovery_id() {
    return this.discovery_id;
  }

  public DiscoveryObject setDiscovery_id(int discovery_id) {
    this.discovery_id = discovery_id;
    setDiscovery_idIsSet(true);
    return this;
  }

  public void unsetDiscovery_id() {
    __isset_bit_vector.clear(__DISCOVERY_ID_ISSET_ID);
  }

  /** Returns true if field discovery_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscovery_id() {
    return __isset_bit_vector.get(__DISCOVERY_ID_ISSET_ID);
  }

  public void setDiscovery_idIsSet(boolean value) {
    __isset_bit_vector.set(__DISCOVERY_ID_ISSET_ID, value);
  }

  public String getOperator() {
    return this.operator;
  }

  public DiscoveryObject setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public DiscoveryObject setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public DiscoveryObject setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public double getPercentage() {
    return this.percentage;
  }

  public DiscoveryObject setPercentage(double percentage) {
    this.percentage = percentage;
    setPercentageIsSet(true);
    return this;
  }

  public void unsetPercentage() {
    __isset_bit_vector.clear(__PERCENTAGE_ISSET_ID);
  }

  /** Returns true if field percentage is set (has been assigned a value) and false otherwise */
  public boolean isSetPercentage() {
    return __isset_bit_vector.get(__PERCENTAGE_ISSET_ID);
  }

  public void setPercentageIsSet(boolean value) {
    __isset_bit_vector.set(__PERCENTAGE_ISSET_ID, value);
  }

  public String getCategory() {
    return this.category;
  }

  public DiscoveryObject setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DISCOVERY_ID:
      if (value == null) {
        unsetDiscovery_id();
      } else {
        setDiscovery_id((Integer)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case PERCENTAGE:
      if (value == null) {
        unsetPercentage();
      } else {
        setPercentage((Double)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DISCOVERY_ID:
      return Integer.valueOf(getDiscovery_id());

    case OPERATOR:
      return getOperator();

    case NAME:
      return getName();

    case VALUE:
      return getValue();

    case PERCENTAGE:
      return Double.valueOf(getPercentage());

    case CATEGORY:
      return getCategory();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DISCOVERY_ID:
      return isSetDiscovery_id();
    case OPERATOR:
      return isSetOperator();
    case NAME:
      return isSetName();
    case VALUE:
      return isSetValue();
    case PERCENTAGE:
      return isSetPercentage();
    case CATEGORY:
      return isSetCategory();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DiscoveryObject)
      return this.equals((DiscoveryObject)that);
    return false;
  }

  public boolean equals(DiscoveryObject that) {
    if (that == null)
      return false;

    boolean this_present_discovery_id = true;
    boolean that_present_discovery_id = true;
    if (this_present_discovery_id || that_present_discovery_id) {
      if (!(this_present_discovery_id && that_present_discovery_id))
        return false;
      if (this.discovery_id != that.discovery_id)
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_percentage = true;
    boolean that_present_percentage = true;
    if (this_present_percentage || that_present_percentage) {
      if (!(this_present_percentage && that_present_percentage))
        return false;
      if (this.percentage != that.percentage)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DiscoveryObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DiscoveryObject typedOther = (DiscoveryObject)other;

    lastComparison = Boolean.valueOf(isSetDiscovery_id()).compareTo(typedOther.isSetDiscovery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscovery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discovery_id, typedOther.discovery_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(typedOther.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, typedOther.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercentage()).compareTo(typedOther.isSetPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percentage, typedOther.percentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DiscoveryObject(");
    boolean first = true;

    sb.append("discovery_id:");
    sb.append(this.discovery_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("percentage:");
    sb.append(this.percentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DiscoveryObjectStandardSchemeFactory implements SchemeFactory {
    public DiscoveryObjectStandardScheme getScheme() {
      return new DiscoveryObjectStandardScheme();
    }
  }

  private static class DiscoveryObjectStandardScheme extends StandardScheme<DiscoveryObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DiscoveryObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DISCOVERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.discovery_id = iprot.readI32();
              struct.setDiscovery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.percentage = iprot.readDouble();
              struct.setPercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DiscoveryObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DISCOVERY_ID_FIELD_DESC);
      oprot.writeI32(struct.discovery_id);
      oprot.writeFieldEnd();
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(struct.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.percentage);
      oprot.writeFieldEnd();
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DiscoveryObjectTupleSchemeFactory implements SchemeFactory {
    public DiscoveryObjectTupleScheme getScheme() {
      return new DiscoveryObjectTupleScheme();
    }
  }

  private static class DiscoveryObjectTupleScheme extends TupleScheme<DiscoveryObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DiscoveryObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDiscovery_id()) {
        optionals.set(0);
      }
      if (struct.isSetOperator()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetValue()) {
        optionals.set(3);
      }
      if (struct.isSetPercentage()) {
        optionals.set(4);
      }
      if (struct.isSetCategory()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDiscovery_id()) {
        oprot.writeI32(struct.discovery_id);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetPercentage()) {
        oprot.writeDouble(struct.percentage);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DiscoveryObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.discovery_id = iprot.readI32();
        struct.setDiscovery_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.percentage = iprot.readDouble();
        struct.setPercentageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
    }
  }

}

