/* 
 *   This file is part of the Open Database Audit Project (ODAP).
 *
 *   ODAP is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Foobar is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   The code was developed by Rob Williams
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.odap.common.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DisplayEvent implements org.apache.thrift.TBase<DisplayEvent, DisplayEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayEvent");

  private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("row_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("src_ip", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("src_port", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FREQENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("freqency", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SECURITY_RISK_FIELD_DESC = new org.apache.thrift.protocol.TField("security_risk", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tables", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SIMILAR_STATEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("similar_statements", org.apache.thrift.protocol.TType.STRING, (short)13);

  public String row_id; // required
  public int timestamp; // required
  public String src_ip; // required
  public String src_port; // required
  public String dbname; // required
  public String appname; // required
  public String username; // required
  public String statement; // required
  public String freqency; // required
  public String security_risk; // required
  public String tables; // required
  public String columns; // required
  public String similar_statements; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW_ID((short)1, "row_id"),
    TIMESTAMP((short)2, "timestamp"),
    SRC_IP((short)3, "src_ip"),
    SRC_PORT((short)4, "src_port"),
    DBNAME((short)5, "dbname"),
    APPNAME((short)6, "appname"),
    USERNAME((short)7, "username"),
    STATEMENT((short)8, "statement"),
    FREQENCY((short)9, "freqency"),
    SECURITY_RISK((short)10, "security_risk"),
    TABLES((short)11, "tables"),
    COLUMNS((short)12, "columns"),
    SIMILAR_STATEMENTS((short)13, "similar_statements");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW_ID
          return ROW_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // SRC_IP
          return SRC_IP;
        case 4: // SRC_PORT
          return SRC_PORT;
        case 5: // DBNAME
          return DBNAME;
        case 6: // APPNAME
          return APPNAME;
        case 7: // USERNAME
          return USERNAME;
        case 8: // STATEMENT
          return STATEMENT;
        case 9: // FREQENCY
          return FREQENCY;
        case 10: // SECURITY_RISK
          return SECURITY_RISK;
        case 11: // TABLES
          return TABLES;
        case 12: // COLUMNS
          return COLUMNS;
        case 13: // SIMILAR_STATEMENTS
          return SIMILAR_STATEMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("row_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SRC_IP, new org.apache.thrift.meta_data.FieldMetaData("src_ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_PORT, new org.apache.thrift.meta_data.FieldMetaData("src_port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPNAME, new org.apache.thrift.meta_data.FieldMetaData("appname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREQENCY, new org.apache.thrift.meta_data.FieldMetaData("freqency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECURITY_RISK, new org.apache.thrift.meta_data.FieldMetaData("security_risk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLES, new org.apache.thrift.meta_data.FieldMetaData("tables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIMILAR_STATEMENTS, new org.apache.thrift.meta_data.FieldMetaData("similar_statements", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayEvent.class, metaDataMap);
  }

  public DisplayEvent() {
  }

  public DisplayEvent(
    String row_id,
    int timestamp,
    String src_ip,
    String src_port,
    String dbname,
    String appname,
    String username,
    String statement,
    String freqency,
    String security_risk,
    String tables,
    String columns,
    String similar_statements)
  {
    this();
    this.row_id = row_id;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.src_ip = src_ip;
    this.src_port = src_port;
    this.dbname = dbname;
    this.appname = appname;
    this.username = username;
    this.statement = statement;
    this.freqency = freqency;
    this.security_risk = security_risk;
    this.tables = tables;
    this.columns = columns;
    this.similar_statements = similar_statements;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DisplayEvent(DisplayEvent other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRow_id()) {
      this.row_id = other.row_id;
    }
    this.timestamp = other.timestamp;
    if (other.isSetSrc_ip()) {
      this.src_ip = other.src_ip;
    }
    if (other.isSetSrc_port()) {
      this.src_port = other.src_port;
    }
    if (other.isSetDbname()) {
      this.dbname = other.dbname;
    }
    if (other.isSetAppname()) {
      this.appname = other.appname;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    if (other.isSetFreqency()) {
      this.freqency = other.freqency;
    }
    if (other.isSetSecurity_risk()) {
      this.security_risk = other.security_risk;
    }
    if (other.isSetTables()) {
      this.tables = other.tables;
    }
    if (other.isSetColumns()) {
      this.columns = other.columns;
    }
    if (other.isSetSimilar_statements()) {
      this.similar_statements = other.similar_statements;
    }
  }

  public DisplayEvent deepCopy() {
    return new DisplayEvent(this);
  }

  @Override
  public void clear() {
    this.row_id = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.src_ip = null;
    this.src_port = null;
    this.dbname = null;
    this.appname = null;
    this.username = null;
    this.statement = null;
    this.freqency = null;
    this.security_risk = null;
    this.tables = null;
    this.columns = null;
    this.similar_statements = null;
  }

  public String getRow_id() {
    return this.row_id;
  }

  public DisplayEvent setRow_id(String row_id) {
    this.row_id = row_id;
    return this;
  }

  public void unsetRow_id() {
    this.row_id = null;
  }

  /** Returns true if field row_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_id() {
    return this.row_id != null;
  }

  public void setRow_idIsSet(boolean value) {
    if (!value) {
      this.row_id = null;
    }
  }

  public int getTimestamp() {
    return this.timestamp;
  }

  public DisplayEvent setTimestamp(int timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getSrc_ip() {
    return this.src_ip;
  }

  public DisplayEvent setSrc_ip(String src_ip) {
    this.src_ip = src_ip;
    return this;
  }

  public void unsetSrc_ip() {
    this.src_ip = null;
  }

  /** Returns true if field src_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_ip() {
    return this.src_ip != null;
  }

  public void setSrc_ipIsSet(boolean value) {
    if (!value) {
      this.src_ip = null;
    }
  }

  public String getSrc_port() {
    return this.src_port;
  }

  public DisplayEvent setSrc_port(String src_port) {
    this.src_port = src_port;
    return this;
  }

  public void unsetSrc_port() {
    this.src_port = null;
  }

  /** Returns true if field src_port is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_port() {
    return this.src_port != null;
  }

  public void setSrc_portIsSet(boolean value) {
    if (!value) {
      this.src_port = null;
    }
  }

  public String getDbname() {
    return this.dbname;
  }

  public DisplayEvent setDbname(String dbname) {
    this.dbname = dbname;
    return this;
  }

  public void unsetDbname() {
    this.dbname = null;
  }

  /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
  public boolean isSetDbname() {
    return this.dbname != null;
  }

  public void setDbnameIsSet(boolean value) {
    if (!value) {
      this.dbname = null;
    }
  }

  public String getAppname() {
    return this.appname;
  }

  public DisplayEvent setAppname(String appname) {
    this.appname = appname;
    return this;
  }

  public void unsetAppname() {
    this.appname = null;
  }

  /** Returns true if field appname is set (has been assigned a value) and false otherwise */
  public boolean isSetAppname() {
    return this.appname != null;
  }

  public void setAppnameIsSet(boolean value) {
    if (!value) {
      this.appname = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public DisplayEvent setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getStatement() {
    return this.statement;
  }

  public DisplayEvent setStatement(String statement) {
    this.statement = statement;
    return this;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  public String getFreqency() {
    return this.freqency;
  }

  public DisplayEvent setFreqency(String freqency) {
    this.freqency = freqency;
    return this;
  }

  public void unsetFreqency() {
    this.freqency = null;
  }

  /** Returns true if field freqency is set (has been assigned a value) and false otherwise */
  public boolean isSetFreqency() {
    return this.freqency != null;
  }

  public void setFreqencyIsSet(boolean value) {
    if (!value) {
      this.freqency = null;
    }
  }

  public String getSecurity_risk() {
    return this.security_risk;
  }

  public DisplayEvent setSecurity_risk(String security_risk) {
    this.security_risk = security_risk;
    return this;
  }

  public void unsetSecurity_risk() {
    this.security_risk = null;
  }

  /** Returns true if field security_risk is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurity_risk() {
    return this.security_risk != null;
  }

  public void setSecurity_riskIsSet(boolean value) {
    if (!value) {
      this.security_risk = null;
    }
  }

  public String getTables() {
    return this.tables;
  }

  public DisplayEvent setTables(String tables) {
    this.tables = tables;
    return this;
  }

  public void unsetTables() {
    this.tables = null;
  }

  /** Returns true if field tables is set (has been assigned a value) and false otherwise */
  public boolean isSetTables() {
    return this.tables != null;
  }

  public void setTablesIsSet(boolean value) {
    if (!value) {
      this.tables = null;
    }
  }

  public String getColumns() {
    return this.columns;
  }

  public DisplayEvent setColumns(String columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public String getSimilar_statements() {
    return this.similar_statements;
  }

  public DisplayEvent setSimilar_statements(String similar_statements) {
    this.similar_statements = similar_statements;
    return this;
  }

  public void unsetSimilar_statements() {
    this.similar_statements = null;
  }

  /** Returns true if field similar_statements is set (has been assigned a value) and false otherwise */
  public boolean isSetSimilar_statements() {
    return this.similar_statements != null;
  }

  public void setSimilar_statementsIsSet(boolean value) {
    if (!value) {
      this.similar_statements = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROW_ID:
      if (value == null) {
        unsetRow_id();
      } else {
        setRow_id((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Integer)value);
      }
      break;

    case SRC_IP:
      if (value == null) {
        unsetSrc_ip();
      } else {
        setSrc_ip((String)value);
      }
      break;

    case SRC_PORT:
      if (value == null) {
        unsetSrc_port();
      } else {
        setSrc_port((String)value);
      }
      break;

    case DBNAME:
      if (value == null) {
        unsetDbname();
      } else {
        setDbname((String)value);
      }
      break;

    case APPNAME:
      if (value == null) {
        unsetAppname();
      } else {
        setAppname((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case STATEMENT:
      if (value == null) {
        unsetStatement();
      } else {
        setStatement((String)value);
      }
      break;

    case FREQENCY:
      if (value == null) {
        unsetFreqency();
      } else {
        setFreqency((String)value);
      }
      break;

    case SECURITY_RISK:
      if (value == null) {
        unsetSecurity_risk();
      } else {
        setSecurity_risk((String)value);
      }
      break;

    case TABLES:
      if (value == null) {
        unsetTables();
      } else {
        setTables((String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((String)value);
      }
      break;

    case SIMILAR_STATEMENTS:
      if (value == null) {
        unsetSimilar_statements();
      } else {
        setSimilar_statements((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW_ID:
      return getRow_id();

    case TIMESTAMP:
      return Integer.valueOf(getTimestamp());

    case SRC_IP:
      return getSrc_ip();

    case SRC_PORT:
      return getSrc_port();

    case DBNAME:
      return getDbname();

    case APPNAME:
      return getAppname();

    case USERNAME:
      return getUsername();

    case STATEMENT:
      return getStatement();

    case FREQENCY:
      return getFreqency();

    case SECURITY_RISK:
      return getSecurity_risk();

    case TABLES:
      return getTables();

    case COLUMNS:
      return getColumns();

    case SIMILAR_STATEMENTS:
      return getSimilar_statements();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROW_ID:
      return isSetRow_id();
    case TIMESTAMP:
      return isSetTimestamp();
    case SRC_IP:
      return isSetSrc_ip();
    case SRC_PORT:
      return isSetSrc_port();
    case DBNAME:
      return isSetDbname();
    case APPNAME:
      return isSetAppname();
    case USERNAME:
      return isSetUsername();
    case STATEMENT:
      return isSetStatement();
    case FREQENCY:
      return isSetFreqency();
    case SECURITY_RISK:
      return isSetSecurity_risk();
    case TABLES:
      return isSetTables();
    case COLUMNS:
      return isSetColumns();
    case SIMILAR_STATEMENTS:
      return isSetSimilar_statements();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DisplayEvent)
      return this.equals((DisplayEvent)that);
    return false;
  }

  public boolean equals(DisplayEvent that) {
    if (that == null)
      return false;

    boolean this_present_row_id = true && this.isSetRow_id();
    boolean that_present_row_id = true && that.isSetRow_id();
    if (this_present_row_id || that_present_row_id) {
      if (!(this_present_row_id && that_present_row_id))
        return false;
      if (!this.row_id.equals(that.row_id))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_src_ip = true && this.isSetSrc_ip();
    boolean that_present_src_ip = true && that.isSetSrc_ip();
    if (this_present_src_ip || that_present_src_ip) {
      if (!(this_present_src_ip && that_present_src_ip))
        return false;
      if (!this.src_ip.equals(that.src_ip))
        return false;
    }

    boolean this_present_src_port = true && this.isSetSrc_port();
    boolean that_present_src_port = true && that.isSetSrc_port();
    if (this_present_src_port || that_present_src_port) {
      if (!(this_present_src_port && that_present_src_port))
        return false;
      if (!this.src_port.equals(that.src_port))
        return false;
    }

    boolean this_present_dbname = true && this.isSetDbname();
    boolean that_present_dbname = true && that.isSetDbname();
    if (this_present_dbname || that_present_dbname) {
      if (!(this_present_dbname && that_present_dbname))
        return false;
      if (!this.dbname.equals(that.dbname))
        return false;
    }

    boolean this_present_appname = true && this.isSetAppname();
    boolean that_present_appname = true && that.isSetAppname();
    if (this_present_appname || that_present_appname) {
      if (!(this_present_appname && that_present_appname))
        return false;
      if (!this.appname.equals(that.appname))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement))
        return false;
      if (!this.statement.equals(that.statement))
        return false;
    }

    boolean this_present_freqency = true && this.isSetFreqency();
    boolean that_present_freqency = true && that.isSetFreqency();
    if (this_present_freqency || that_present_freqency) {
      if (!(this_present_freqency && that_present_freqency))
        return false;
      if (!this.freqency.equals(that.freqency))
        return false;
    }

    boolean this_present_security_risk = true && this.isSetSecurity_risk();
    boolean that_present_security_risk = true && that.isSetSecurity_risk();
    if (this_present_security_risk || that_present_security_risk) {
      if (!(this_present_security_risk && that_present_security_risk))
        return false;
      if (!this.security_risk.equals(that.security_risk))
        return false;
    }

    boolean this_present_tables = true && this.isSetTables();
    boolean that_present_tables = true && that.isSetTables();
    if (this_present_tables || that_present_tables) {
      if (!(this_present_tables && that_present_tables))
        return false;
      if (!this.tables.equals(that.tables))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_similar_statements = true && this.isSetSimilar_statements();
    boolean that_present_similar_statements = true && that.isSetSimilar_statements();
    if (this_present_similar_statements || that_present_similar_statements) {
      if (!(this_present_similar_statements && that_present_similar_statements))
        return false;
      if (!this.similar_statements.equals(that.similar_statements))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DisplayEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DisplayEvent typedOther = (DisplayEvent)other;

    lastComparison = Boolean.valueOf(isSetRow_id()).compareTo(typedOther.isSetRow_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_id, typedOther.row_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_ip()).compareTo(typedOther.isSetSrc_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_ip, typedOther.src_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_port()).compareTo(typedOther.isSetSrc_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_port, typedOther.src_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, typedOther.dbname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppname()).compareTo(typedOther.isSetAppname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appname, typedOther.appname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatement()).compareTo(typedOther.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, typedOther.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreqency()).compareTo(typedOther.isSetFreqency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreqency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freqency, typedOther.freqency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurity_risk()).compareTo(typedOther.isSetSecurity_risk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurity_risk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security_risk, typedOther.security_risk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables()).compareTo(typedOther.isSetTables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables, typedOther.tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimilar_statements()).compareTo(typedOther.isSetSimilar_statements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimilar_statements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.similar_statements, typedOther.similar_statements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ROW_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.row_id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.timestamp = iprot.readI32();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SRC_IP
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.src_ip = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SRC_PORT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.src_port = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DBNAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.dbname = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // APPNAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.appname = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // USERNAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.username = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // STATEMENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.statement = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // FREQENCY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.freqency = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // SECURITY_RISK
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.security_risk = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TABLES
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.tables = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // COLUMNS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.columns = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // SIMILAR_STATEMENTS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.similar_statements = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.row_id != null) {
      oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
      oprot.writeString(this.row_id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI32(this.timestamp);
    oprot.writeFieldEnd();
    if (this.src_ip != null) {
      oprot.writeFieldBegin(SRC_IP_FIELD_DESC);
      oprot.writeString(this.src_ip);
      oprot.writeFieldEnd();
    }
    if (this.src_port != null) {
      oprot.writeFieldBegin(SRC_PORT_FIELD_DESC);
      oprot.writeString(this.src_port);
      oprot.writeFieldEnd();
    }
    if (this.dbname != null) {
      oprot.writeFieldBegin(DBNAME_FIELD_DESC);
      oprot.writeString(this.dbname);
      oprot.writeFieldEnd();
    }
    if (this.appname != null) {
      oprot.writeFieldBegin(APPNAME_FIELD_DESC);
      oprot.writeString(this.appname);
      oprot.writeFieldEnd();
    }
    if (this.username != null) {
      oprot.writeFieldBegin(USERNAME_FIELD_DESC);
      oprot.writeString(this.username);
      oprot.writeFieldEnd();
    }
    if (this.statement != null) {
      oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
      oprot.writeString(this.statement);
      oprot.writeFieldEnd();
    }
    if (this.freqency != null) {
      oprot.writeFieldBegin(FREQENCY_FIELD_DESC);
      oprot.writeString(this.freqency);
      oprot.writeFieldEnd();
    }
    if (this.security_risk != null) {
      oprot.writeFieldBegin(SECURITY_RISK_FIELD_DESC);
      oprot.writeString(this.security_risk);
      oprot.writeFieldEnd();
    }
    if (this.tables != null) {
      oprot.writeFieldBegin(TABLES_FIELD_DESC);
      oprot.writeString(this.tables);
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
      oprot.writeString(this.columns);
      oprot.writeFieldEnd();
    }
    if (this.similar_statements != null) {
      oprot.writeFieldBegin(SIMILAR_STATEMENTS_FIELD_DESC);
      oprot.writeString(this.similar_statements);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DisplayEvent(");
    boolean first = true;

    sb.append("row_id:");
    if (this.row_id == null) {
      sb.append("null");
    } else {
      sb.append(this.row_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_ip:");
    if (this.src_ip == null) {
      sb.append("null");
    } else {
      sb.append(this.src_ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_port:");
    if (this.src_port == null) {
      sb.append("null");
    } else {
      sb.append(this.src_port);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbname:");
    if (this.dbname == null) {
      sb.append("null");
    } else {
      sb.append(this.dbname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appname:");
    if (this.appname == null) {
      sb.append("null");
    } else {
      sb.append(this.appname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statement:");
    if (this.statement == null) {
      sb.append("null");
    } else {
      sb.append(this.statement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("freqency:");
    if (this.freqency == null) {
      sb.append("null");
    } else {
      sb.append(this.freqency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("security_risk:");
    if (this.security_risk == null) {
      sb.append("null");
    } else {
      sb.append(this.security_risk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tables:");
    if (this.tables == null) {
      sb.append("null");
    } else {
      sb.append(this.tables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("similar_statements:");
    if (this.similar_statements == null) {
      sb.append("null");
    } else {
      sb.append(this.similar_statements);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

