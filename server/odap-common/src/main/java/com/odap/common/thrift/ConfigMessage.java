/* 
 *   This file is part of the Open Database Audit Project (ODAP).
 *
 *   ODAP is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Foobar is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   The code was developed by Rob Williams
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.odap.common.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConfigMessage implements org.apache.thrift.TBase<ConfigMessage, ConfigMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigMessage");

  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_SOFTWARE_FIELD_DESC = new org.apache.thrift.protocol.TField("server_software", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIMEZONE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone_offset", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRIP_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("strip_predicates", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I16, (short)9);
  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRING, (short)10);

  public String username; // required
  public String password; // required
  public String server_software; // required
  public short port; // required
  public String server_name; // required
  public double timezone_offset; // required
  public boolean strip_predicates; // required
  public String token; // required
  public short server_id; // required
  public String server; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERNAME((short)1, "username"),
    PASSWORD((short)2, "password"),
    SERVER_SOFTWARE((short)3, "server_software"),
    PORT((short)4, "port"),
    SERVER_NAME((short)5, "server_name"),
    TIMEZONE_OFFSET((short)6, "timezone_offset"),
    STRIP_PREDICATES((short)7, "strip_predicates"),
    TOKEN((short)8, "token"),
    SERVER_ID((short)9, "server_id"),
    SERVER((short)10, "server");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERNAME
          return USERNAME;
        case 2: // PASSWORD
          return PASSWORD;
        case 3: // SERVER_SOFTWARE
          return SERVER_SOFTWARE;
        case 4: // PORT
          return PORT;
        case 5: // SERVER_NAME
          return SERVER_NAME;
        case 6: // TIMEZONE_OFFSET
          return TIMEZONE_OFFSET;
        case 7: // STRIP_PREDICATES
          return STRIP_PREDICATES;
        case 8: // TOKEN
          return TOKEN;
        case 9: // SERVER_ID
          return SERVER_ID;
        case 10: // SERVER
          return SERVER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __TIMEZONE_OFFSET_ISSET_ID = 1;
  private static final int __STRIP_PREDICATES_ISSET_ID = 2;
  private static final int __SERVER_ID_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_SOFTWARE, new org.apache.thrift.meta_data.FieldMetaData("server_software", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMEZONE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("timezone_offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRIP_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("strip_predicates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigMessage.class, metaDataMap);
  }

  public ConfigMessage() {
  }

  public ConfigMessage(
    String username,
    String password,
    String server_software,
    short port,
    String server_name,
    double timezone_offset,
    boolean strip_predicates,
    String token,
    short server_id,
    String server)
  {
    this();
    this.username = username;
    this.password = password;
    this.server_software = server_software;
    this.port = port;
    setPortIsSet(true);
    this.server_name = server_name;
    this.timezone_offset = timezone_offset;
    setTimezone_offsetIsSet(true);
    this.strip_predicates = strip_predicates;
    setStrip_predicatesIsSet(true);
    this.token = token;
    this.server_id = server_id;
    setServer_idIsSet(true);
    this.server = server;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigMessage(ConfigMessage other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetServer_software()) {
      this.server_software = other.server_software;
    }
    this.port = other.port;
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
    this.timezone_offset = other.timezone_offset;
    this.strip_predicates = other.strip_predicates;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.server_id = other.server_id;
    if (other.isSetServer()) {
      this.server = other.server;
    }
  }

  public ConfigMessage deepCopy() {
    return new ConfigMessage(this);
  }

  @Override
  public void clear() {
    this.username = null;
    this.password = null;
    this.server_software = null;
    setPortIsSet(false);
    this.port = 0;
    this.server_name = null;
    setTimezone_offsetIsSet(false);
    this.timezone_offset = 0.0;
    setStrip_predicatesIsSet(false);
    this.strip_predicates = false;
    this.token = null;
    setServer_idIsSet(false);
    this.server_id = 0;
    this.server = null;
  }

  public String getUsername() {
    return this.username;
  }

  public ConfigMessage setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public ConfigMessage setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getServer_software() {
    return this.server_software;
  }

  public ConfigMessage setServer_software(String server_software) {
    this.server_software = server_software;
    return this;
  }

  public void unsetServer_software() {
    this.server_software = null;
  }

  /** Returns true if field server_software is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_software() {
    return this.server_software != null;
  }

  public void setServer_softwareIsSet(boolean value) {
    if (!value) {
      this.server_software = null;
    }
  }

  public short getPort() {
    return this.port;
  }

  public ConfigMessage setPort(short port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bit_vector.clear(__PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return __isset_bit_vector.get(__PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bit_vector.set(__PORT_ISSET_ID, value);
  }

  public String getServer_name() {
    return this.server_name;
  }

  public ConfigMessage setServer_name(String server_name) {
    this.server_name = server_name;
    return this;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  public double getTimezone_offset() {
    return this.timezone_offset;
  }

  public ConfigMessage setTimezone_offset(double timezone_offset) {
    this.timezone_offset = timezone_offset;
    setTimezone_offsetIsSet(true);
    return this;
  }

  public void unsetTimezone_offset() {
    __isset_bit_vector.clear(__TIMEZONE_OFFSET_ISSET_ID);
  }

  /** Returns true if field timezone_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone_offset() {
    return __isset_bit_vector.get(__TIMEZONE_OFFSET_ISSET_ID);
  }

  public void setTimezone_offsetIsSet(boolean value) {
    __isset_bit_vector.set(__TIMEZONE_OFFSET_ISSET_ID, value);
  }

  public boolean isStrip_predicates() {
    return this.strip_predicates;
  }

  public ConfigMessage setStrip_predicates(boolean strip_predicates) {
    this.strip_predicates = strip_predicates;
    setStrip_predicatesIsSet(true);
    return this;
  }

  public void unsetStrip_predicates() {
    __isset_bit_vector.clear(__STRIP_PREDICATES_ISSET_ID);
  }

  /** Returns true if field strip_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetStrip_predicates() {
    return __isset_bit_vector.get(__STRIP_PREDICATES_ISSET_ID);
  }

  public void setStrip_predicatesIsSet(boolean value) {
    __isset_bit_vector.set(__STRIP_PREDICATES_ISSET_ID, value);
  }

  public String getToken() {
    return this.token;
  }

  public ConfigMessage setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public short getServer_id() {
    return this.server_id;
  }

  public ConfigMessage setServer_id(short server_id) {
    this.server_id = server_id;
    setServer_idIsSet(true);
    return this;
  }

  public void unsetServer_id() {
    __isset_bit_vector.clear(__SERVER_ID_ISSET_ID);
  }

  /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_id() {
    return __isset_bit_vector.get(__SERVER_ID_ISSET_ID);
  }

  public void setServer_idIsSet(boolean value) {
    __isset_bit_vector.set(__SERVER_ID_ISSET_ID, value);
  }

  public String getServer() {
    return this.server;
  }

  public ConfigMessage setServer(String server) {
    this.server = server;
    return this;
  }

  public void unsetServer() {
    this.server = null;
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return this.server != null;
  }

  public void setServerIsSet(boolean value) {
    if (!value) {
      this.server = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case SERVER_SOFTWARE:
      if (value == null) {
        unsetServer_software();
      } else {
        setServer_software((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Short)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    case TIMEZONE_OFFSET:
      if (value == null) {
        unsetTimezone_offset();
      } else {
        setTimezone_offset((Double)value);
      }
      break;

    case STRIP_PREDICATES:
      if (value == null) {
        unsetStrip_predicates();
      } else {
        setStrip_predicates((Boolean)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServer_id();
      } else {
        setServer_id((Short)value);
      }
      break;

    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case SERVER_SOFTWARE:
      return getServer_software();

    case PORT:
      return Short.valueOf(getPort());

    case SERVER_NAME:
      return getServer_name();

    case TIMEZONE_OFFSET:
      return Double.valueOf(getTimezone_offset());

    case STRIP_PREDICATES:
      return Boolean.valueOf(isStrip_predicates());

    case TOKEN:
      return getToken();

    case SERVER_ID:
      return Short.valueOf(getServer_id());

    case SERVER:
      return getServer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case SERVER_SOFTWARE:
      return isSetServer_software();
    case PORT:
      return isSetPort();
    case SERVER_NAME:
      return isSetServer_name();
    case TIMEZONE_OFFSET:
      return isSetTimezone_offset();
    case STRIP_PREDICATES:
      return isSetStrip_predicates();
    case TOKEN:
      return isSetToken();
    case SERVER_ID:
      return isSetServer_id();
    case SERVER:
      return isSetServer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigMessage)
      return this.equals((ConfigMessage)that);
    return false;
  }

  public boolean equals(ConfigMessage that) {
    if (that == null)
      return false;

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_server_software = true && this.isSetServer_software();
    boolean that_present_server_software = true && that.isSetServer_software();
    if (this_present_server_software || that_present_server_software) {
      if (!(this_present_server_software && that_present_server_software))
        return false;
      if (!this.server_software.equals(that.server_software))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    boolean this_present_timezone_offset = true;
    boolean that_present_timezone_offset = true;
    if (this_present_timezone_offset || that_present_timezone_offset) {
      if (!(this_present_timezone_offset && that_present_timezone_offset))
        return false;
      if (this.timezone_offset != that.timezone_offset)
        return false;
    }

    boolean this_present_strip_predicates = true;
    boolean that_present_strip_predicates = true;
    if (this_present_strip_predicates || that_present_strip_predicates) {
      if (!(this_present_strip_predicates && that_present_strip_predicates))
        return false;
      if (this.strip_predicates != that.strip_predicates)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_server_id = true;
    boolean that_present_server_id = true;
    if (this_present_server_id || that_present_server_id) {
      if (!(this_present_server_id && that_present_server_id))
        return false;
      if (this.server_id != that.server_id)
        return false;
    }

    boolean this_present_server = true && this.isSetServer();
    boolean that_present_server = true && that.isSetServer();
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (!this.server.equals(that.server))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ConfigMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ConfigMessage typedOther = (ConfigMessage)other;

    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_software()).compareTo(typedOther.isSetServer_software());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_software()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_software, typedOther.server_software);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(typedOther.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, typedOther.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimezone_offset()).compareTo(typedOther.isSetTimezone_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone_offset, typedOther.timezone_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrip_predicates()).compareTo(typedOther.isSetStrip_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrip_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip_predicates, typedOther.strip_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer()).compareTo(typedOther.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, typedOther.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USERNAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.username = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PASSWORD
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.password = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SERVER_SOFTWARE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.server_software = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PORT
          if (field.type == org.apache.thrift.protocol.TType.I16) {
            this.port = iprot.readI16();
            setPortIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SERVER_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.server_name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TIMEZONE_OFFSET
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.timezone_offset = iprot.readDouble();
            setTimezone_offsetIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // STRIP_PREDICATES
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.strip_predicates = iprot.readBool();
            setStrip_predicatesIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.token = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SERVER_ID
          if (field.type == org.apache.thrift.protocol.TType.I16) {
            this.server_id = iprot.readI16();
            setServer_idIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // SERVER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.server = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.username != null) {
      oprot.writeFieldBegin(USERNAME_FIELD_DESC);
      oprot.writeString(this.username);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    if (this.server_software != null) {
      oprot.writeFieldBegin(SERVER_SOFTWARE_FIELD_DESC);
      oprot.writeString(this.server_software);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PORT_FIELD_DESC);
    oprot.writeI16(this.port);
    oprot.writeFieldEnd();
    if (this.server_name != null) {
      oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
      oprot.writeString(this.server_name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMEZONE_OFFSET_FIELD_DESC);
    oprot.writeDouble(this.timezone_offset);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(STRIP_PREDICATES_FIELD_DESC);
    oprot.writeBool(this.strip_predicates);
    oprot.writeFieldEnd();
    if (this.token != null) {
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
    oprot.writeI16(this.server_id);
    oprot.writeFieldEnd();
    if (this.server != null) {
      oprot.writeFieldBegin(SERVER_FIELD_DESC);
      oprot.writeString(this.server);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigMessage(");
    boolean first = true;

    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_software:");
    if (this.server_software == null) {
      sb.append("null");
    } else {
      sb.append(this.server_software);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_name:");
    if (this.server_name == null) {
      sb.append("null");
    } else {
      sb.append(this.server_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timezone_offset:");
    sb.append(this.timezone_offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strip_predicates:");
    sb.append(this.strip_predicates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_id:");
    sb.append(this.server_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("server:");
    if (this.server == null) {
      sb.append("null");
    } else {
      sb.append(this.server);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

