/* 
 *   This file is part of the Open Database Audit Project (ODAP).
 *
 *   ODAP is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Foobar is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   The code was developed by Rob Williams
 */
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.odap.common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Event implements org.apache.thrift.TBase<Event, Event._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Event");

  private static final org.apache.thrift.protocol.TField SRC_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("src_ip", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("src_port", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DBNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField APPNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appname", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_count", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventTupleSchemeFactory());
  }

  public String src_ip; // required
  public int src_port; // required
  public int timestamp; // required
  public String statement; // required
  public String dbname; // required
  public String appname; // required
  public String username; // required
  public int row_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_IP((short)1, "src_ip"),
    SRC_PORT((short)2, "src_port"),
    TIMESTAMP((short)3, "timestamp"),
    STATEMENT((short)5, "statement"),
    DBNAME((short)6, "dbname"),
    APPNAME((short)7, "appname"),
    USERNAME((short)8, "username"),
    ROW_COUNT((short)9, "row_count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_IP
          return SRC_IP;
        case 2: // SRC_PORT
          return SRC_PORT;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 5: // STATEMENT
          return STATEMENT;
        case 6: // DBNAME
          return DBNAME;
        case 7: // APPNAME
          return APPNAME;
        case 8: // USERNAME
          return USERNAME;
        case 9: // ROW_COUNT
          return ROW_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SRC_PORT_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __ROW_COUNT_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_IP, new org.apache.thrift.meta_data.FieldMetaData("src_ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_PORT, new org.apache.thrift.meta_data.FieldMetaData("src_port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DBNAME, new org.apache.thrift.meta_data.FieldMetaData("dbname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPNAME, new org.apache.thrift.meta_data.FieldMetaData("appname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("row_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Event.class, metaDataMap);
  }

  public Event() {
  }

  public Event(
    String src_ip,
    int src_port,
    int timestamp,
    String statement,
    String dbname,
    String appname,
    String username,
    int row_count)
  {
    this();
    this.src_ip = src_ip;
    this.src_port = src_port;
    setSrc_portIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.statement = statement;
    this.dbname = dbname;
    this.appname = appname;
    this.username = username;
    this.row_count = row_count;
    setRow_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Event(Event other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSrc_ip()) {
      this.src_ip = other.src_ip;
    }
    this.src_port = other.src_port;
    this.timestamp = other.timestamp;
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    if (other.isSetDbname()) {
      this.dbname = other.dbname;
    }
    if (other.isSetAppname()) {
      this.appname = other.appname;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.row_count = other.row_count;
  }

  public Event deepCopy() {
    return new Event(this);
  }

  @Override
  public void clear() {
    this.src_ip = null;
    setSrc_portIsSet(false);
    this.src_port = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.statement = null;
    this.dbname = null;
    this.appname = null;
    this.username = null;
    setRow_countIsSet(false);
    this.row_count = 0;
  }

  public String getSrc_ip() {
    return this.src_ip;
  }

  public Event setSrc_ip(String src_ip) {
    this.src_ip = src_ip;
    return this;
  }

  public void unsetSrc_ip() {
    this.src_ip = null;
  }

  /** Returns true if field src_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_ip() {
    return this.src_ip != null;
  }

  public void setSrc_ipIsSet(boolean value) {
    if (!value) {
      this.src_ip = null;
    }
  }

  public int getSrc_port() {
    return this.src_port;
  }

  public Event setSrc_port(int src_port) {
    this.src_port = src_port;
    setSrc_portIsSet(true);
    return this;
  }

  public void unsetSrc_port() {
    __isset_bit_vector.clear(__SRC_PORT_ISSET_ID);
  }

  /** Returns true if field src_port is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_port() {
    return __isset_bit_vector.get(__SRC_PORT_ISSET_ID);
  }

  public void setSrc_portIsSet(boolean value) {
    __isset_bit_vector.set(__SRC_PORT_ISSET_ID, value);
  }

  public int getTimestamp() {
    return this.timestamp;
  }

  public Event setTimestamp(int timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getStatement() {
    return this.statement;
  }

  public Event setStatement(String statement) {
    this.statement = statement;
    return this;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  public String getDbname() {
    return this.dbname;
  }

  public Event setDbname(String dbname) {
    this.dbname = dbname;
    return this;
  }

  public void unsetDbname() {
    this.dbname = null;
  }

  /** Returns true if field dbname is set (has been assigned a value) and false otherwise */
  public boolean isSetDbname() {
    return this.dbname != null;
  }

  public void setDbnameIsSet(boolean value) {
    if (!value) {
      this.dbname = null;
    }
  }

  public String getAppname() {
    return this.appname;
  }

  public Event setAppname(String appname) {
    this.appname = appname;
    return this;
  }

  public void unsetAppname() {
    this.appname = null;
  }

  /** Returns true if field appname is set (has been assigned a value) and false otherwise */
  public boolean isSetAppname() {
    return this.appname != null;
  }

  public void setAppnameIsSet(boolean value) {
    if (!value) {
      this.appname = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public Event setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public int getRow_count() {
    return this.row_count;
  }

  public Event setRow_count(int row_count) {
    this.row_count = row_count;
    setRow_countIsSet(true);
    return this;
  }

  public void unsetRow_count() {
    __isset_bit_vector.clear(__ROW_COUNT_ISSET_ID);
  }

  /** Returns true if field row_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_count() {
    return __isset_bit_vector.get(__ROW_COUNT_ISSET_ID);
  }

  public void setRow_countIsSet(boolean value) {
    __isset_bit_vector.set(__ROW_COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_IP:
      if (value == null) {
        unsetSrc_ip();
      } else {
        setSrc_ip((String)value);
      }
      break;

    case SRC_PORT:
      if (value == null) {
        unsetSrc_port();
      } else {
        setSrc_port((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Integer)value);
      }
      break;

    case STATEMENT:
      if (value == null) {
        unsetStatement();
      } else {
        setStatement((String)value);
      }
      break;

    case DBNAME:
      if (value == null) {
        unsetDbname();
      } else {
        setDbname((String)value);
      }
      break;

    case APPNAME:
      if (value == null) {
        unsetAppname();
      } else {
        setAppname((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRow_count();
      } else {
        setRow_count((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_IP:
      return getSrc_ip();

    case SRC_PORT:
      return Integer.valueOf(getSrc_port());

    case TIMESTAMP:
      return Integer.valueOf(getTimestamp());

    case STATEMENT:
      return getStatement();

    case DBNAME:
      return getDbname();

    case APPNAME:
      return getAppname();

    case USERNAME:
      return getUsername();

    case ROW_COUNT:
      return Integer.valueOf(getRow_count());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_IP:
      return isSetSrc_ip();
    case SRC_PORT:
      return isSetSrc_port();
    case TIMESTAMP:
      return isSetTimestamp();
    case STATEMENT:
      return isSetStatement();
    case DBNAME:
      return isSetDbname();
    case APPNAME:
      return isSetAppname();
    case USERNAME:
      return isSetUsername();
    case ROW_COUNT:
      return isSetRow_count();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Event)
      return this.equals((Event)that);
    return false;
  }

  public boolean equals(Event that) {
    if (that == null)
      return false;

    boolean this_present_src_ip = true && this.isSetSrc_ip();
    boolean that_present_src_ip = true && that.isSetSrc_ip();
    if (this_present_src_ip || that_present_src_ip) {
      if (!(this_present_src_ip && that_present_src_ip))
        return false;
      if (!this.src_ip.equals(that.src_ip))
        return false;
    }

    boolean this_present_src_port = true;
    boolean that_present_src_port = true;
    if (this_present_src_port || that_present_src_port) {
      if (!(this_present_src_port && that_present_src_port))
        return false;
      if (this.src_port != that.src_port)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement))
        return false;
      if (!this.statement.equals(that.statement))
        return false;
    }

    boolean this_present_dbname = true && this.isSetDbname();
    boolean that_present_dbname = true && that.isSetDbname();
    if (this_present_dbname || that_present_dbname) {
      if (!(this_present_dbname && that_present_dbname))
        return false;
      if (!this.dbname.equals(that.dbname))
        return false;
    }

    boolean this_present_appname = true && this.isSetAppname();
    boolean that_present_appname = true && that.isSetAppname();
    if (this_present_appname || that_present_appname) {
      if (!(this_present_appname && that_present_appname))
        return false;
      if (!this.appname.equals(that.appname))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_row_count = true;
    boolean that_present_row_count = true;
    if (this_present_row_count || that_present_row_count) {
      if (!(this_present_row_count && that_present_row_count))
        return false;
      if (this.row_count != that.row_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Event other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Event typedOther = (Event)other;

    lastComparison = Boolean.valueOf(isSetSrc_ip()).compareTo(typedOther.isSetSrc_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_ip, typedOther.src_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_port()).compareTo(typedOther.isSetSrc_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_port, typedOther.src_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatement()).compareTo(typedOther.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, typedOther.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbname, typedOther.dbname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppname()).compareTo(typedOther.isSetAppname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appname, typedOther.appname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_count()).compareTo(typedOther.isSetRow_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_count, typedOther.row_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Event(");
    boolean first = true;

    sb.append("src_ip:");
    if (this.src_ip == null) {
      sb.append("null");
    } else {
      sb.append(this.src_ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_port:");
    sb.append(this.src_port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statement:");
    if (this.statement == null) {
      sb.append("null");
    } else {
      sb.append(this.statement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbname:");
    if (this.dbname == null) {
      sb.append("null");
    } else {
      sb.append(this.dbname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appname:");
    if (this.appname == null) {
      sb.append("null");
    } else {
      sb.append(this.appname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_count:");
    sb.append(this.row_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventStandardSchemeFactory implements SchemeFactory {
    public EventStandardScheme getScheme() {
      return new EventStandardScheme();
    }
  }

  private static class EventStandardScheme extends StandardScheme<Event> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Event struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.src_ip = iprot.readString();
              struct.setSrc_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_port = iprot.readI32();
              struct.setSrc_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timestamp = iprot.readI32();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statement = iprot.readString();
              struct.setStatementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DBNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbname = iprot.readString();
              struct.setDbnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APPNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appname = iprot.readString();
              struct.setAppnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.row_count = iprot.readI32();
              struct.setRow_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Event struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.src_ip != null) {
        oprot.writeFieldBegin(SRC_IP_FIELD_DESC);
        oprot.writeString(struct.src_ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SRC_PORT_FIELD_DESC);
      oprot.writeI32(struct.src_port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI32(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.statement != null) {
        oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
        oprot.writeString(struct.statement);
        oprot.writeFieldEnd();
      }
      if (struct.dbname != null) {
        oprot.writeFieldBegin(DBNAME_FIELD_DESC);
        oprot.writeString(struct.dbname);
        oprot.writeFieldEnd();
      }
      if (struct.appname != null) {
        oprot.writeFieldBegin(APPNAME_FIELD_DESC);
        oprot.writeString(struct.appname);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.row_count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventTupleSchemeFactory implements SchemeFactory {
    public EventTupleScheme getScheme() {
      return new EventTupleScheme();
    }
  }

  private static class EventTupleScheme extends TupleScheme<Event> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Event struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSrc_ip()) {
        optionals.set(0);
      }
      if (struct.isSetSrc_port()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetStatement()) {
        optionals.set(3);
      }
      if (struct.isSetDbname()) {
        optionals.set(4);
      }
      if (struct.isSetAppname()) {
        optionals.set(5);
      }
      if (struct.isSetUsername()) {
        optionals.set(6);
      }
      if (struct.isSetRow_count()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSrc_ip()) {
        oprot.writeString(struct.src_ip);
      }
      if (struct.isSetSrc_port()) {
        oprot.writeI32(struct.src_port);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI32(struct.timestamp);
      }
      if (struct.isSetStatement()) {
        oprot.writeString(struct.statement);
      }
      if (struct.isSetDbname()) {
        oprot.writeString(struct.dbname);
      }
      if (struct.isSetAppname()) {
        oprot.writeString(struct.appname);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetRow_count()) {
        oprot.writeI32(struct.row_count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Event struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.src_ip = iprot.readString();
        struct.setSrc_ipIsSet(true);
      }
      if (incoming.get(1)) {
        struct.src_port = iprot.readI32();
        struct.setSrc_portIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI32();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.statement = iprot.readString();
        struct.setStatementIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dbname = iprot.readString();
        struct.setDbnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appname = iprot.readString();
        struct.setAppnameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.row_count = iprot.readI32();
        struct.setRow_countIsSet(true);
      }
    }
  }

}

