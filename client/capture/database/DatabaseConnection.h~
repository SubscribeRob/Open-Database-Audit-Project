/*
 * DatabaseConnection.h
 *
 *  Created on: Nov 29, 2011
 *      Author: root
 */

#ifndef DATABASECONNECTION_H_
#define DATABASECONNECTION_H_


#include <net/ethernet.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include "../../include/charsets.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pcap.h>
#include "log4cxx/logger.h"
#include "../../protocol/AuditEvent.h"
#include "../../CachedUserManager.h"
#include <vector>
#include <time.h>
#include <boost/regex.hpp>
using namespace log4cxx;
using namespace std;
using namespace boost;

extern AuditEventClient * client_store;

class DatabaseConnection {
private:
	static log4cxx::LoggerPtr logger;

protected:
	  const struct ip* 		ip_pkt;		//IP Packet
	  const struct tcphdr* 	tcp_pkt;	//TCP Packet
	  Event event;						//Holds information for the frame being inspected
	  unsigned char packet_data[128*1024];		//Holds a copy of the current packet
	  int  packet_data_length;
	  CachedUserManager userManager;
	  int packet_flag;	//TCP FLAG - Used for looking for SYN on new connections
	  struct timespec last_statement_time;
public:
	DatabaseConnection();
	virtual ~DatabaseConnection();

	bool parse(const u_char * packet,pcap_pkthdr * header,int data_offset);
	bool parse(  char *data, int len);
	bool parse_format_2(char * data, int len);

protected:
	virtual bool parseRequest(int data_offset) = 0;
	virtual bool parseReponse() = 0;
	boost::regex * predicate_regex;
	string remove_predicates(regex& re,const string & input);


	void parseHeader(const u_char * packet,pcap_pkthdr * header,int data_offset);
	std::string itoa(int value, int base);


};

#endif /* DATABASECONNECTION_H_ */
