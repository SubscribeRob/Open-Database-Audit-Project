/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef auditevent_TYPES_H
#define auditevent_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _Event__isset {
  _Event__isset() : src_ip(false), src_port(false), timestamp(false), statement(false), dbname(false), appname(false), username(false), row_count(false) {}
  bool src_ip;
  bool src_port;
  bool timestamp;
  bool statement;
  bool dbname;
  bool appname;
  bool username;
  bool row_count;
} _Event__isset;

class Event {
 public:

  static const char* ascii_fingerprint; // = "542F33A9BF309362330EA11E1F0C61C6";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x2F,0x33,0xA9,0xBF,0x30,0x93,0x62,0x33,0x0E,0xA1,0x1E,0x1F,0x0C,0x61,0xC6};

  Event() : src_ip(""), src_port(0), timestamp(0), statement(""), dbname(""), appname(""), username(""), row_count(0) {
  }

  virtual ~Event() throw() {}

  std::string src_ip;
  int32_t src_port;
  int32_t timestamp;
  std::string statement;
  std::string dbname;
  std::string appname;
  std::string username;
  int32_t row_count;

  _Event__isset __isset;

  void __set_src_ip(const std::string& val) {
    src_ip = val;
  }

  void __set_src_port(const int32_t val) {
    src_port = val;
  }

  void __set_timestamp(const int32_t val) {
    timestamp = val;
  }

  void __set_statement(const std::string& val) {
    statement = val;
  }

  void __set_dbname(const std::string& val) {
    dbname = val;
  }

  void __set_appname(const std::string& val) {
    appname = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_row_count(const int32_t val) {
    row_count = val;
  }

  bool operator == (const Event & rhs) const
  {
    if (!(src_ip == rhs.src_ip))
      return false;
    if (!(src_port == rhs.src_port))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(statement == rhs.statement))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    if (!(appname == rhs.appname))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(row_count == rhs.row_count))
      return false;
    return true;
  }
  bool operator != (const Event &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Event & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Message__isset {
  _Message__isset() : server_id(false), token(false), events(false) {}
  bool server_id;
  bool token;
  bool events;
} _Message__isset;

class Message {
 public:

  static const char* ascii_fingerprint; // = "CC278EFA43BE452B2842AFA45704DE57";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x27,0x8E,0xFA,0x43,0xBE,0x45,0x2B,0x28,0x42,0xAF,0xA4,0x57,0x04,0xDE,0x57};

  Message() : server_id(0), token("") {
  }

  virtual ~Message() throw() {}

  int16_t server_id;
  std::string token;
  std::vector<Event>  events;

  _Message__isset __isset;

  void __set_server_id(const int16_t val) {
    server_id = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  void __set_events(const std::vector<Event> & val) {
    events = val;
  }

  bool operator == (const Message & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigMessage__isset {
  _ConfigMessage__isset() : username(false), password(false), server_software(false), port(false), server_name(false), timezone_offset(false), strip_predicates(false), token(false), server_id(false), server(false) {}
  bool username;
  bool password;
  bool server_software;
  bool port;
  bool server_name;
  bool timezone_offset;
  bool strip_predicates;
  bool token;
  bool server_id;
  bool server;
} _ConfigMessage__isset;

class ConfigMessage {
 public:

  static const char* ascii_fingerprint; // = "DBC00FA976841D550591C52A6277AC63";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xC0,0x0F,0xA9,0x76,0x84,0x1D,0x55,0x05,0x91,0xC5,0x2A,0x62,0x77,0xAC,0x63};

  ConfigMessage() : username(""), password(""), server_software(""), port(0), server_name(""), timezone_offset(0), strip_predicates(0), token(""), server_id(0), server("") {
  }

  virtual ~ConfigMessage() throw() {}

  std::string username;
  std::string password;
  std::string server_software;
  int16_t port;
  std::string server_name;
  double timezone_offset;
  bool strip_predicates;
  std::string token;
  int16_t server_id;
  std::string server;

  _ConfigMessage__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_server_software(const std::string& val) {
    server_software = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  void __set_server_name(const std::string& val) {
    server_name = val;
  }

  void __set_timezone_offset(const double val) {
    timezone_offset = val;
  }

  void __set_strip_predicates(const bool val) {
    strip_predicates = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  void __set_server_id(const int16_t val) {
    server_id = val;
  }

  void __set_server(const std::string& val) {
    server = val;
  }

  bool operator == (const ConfigMessage & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(server_software == rhs.server_software))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(server_name == rhs.server_name))
      return false;
    if (!(timezone_offset == rhs.timezone_offset))
      return false;
    if (!(strip_predicates == rhs.strip_predicates))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(server_id == rhs.server_id))
      return false;
    if (!(server == rhs.server))
      return false;
    return true;
  }
  bool operator != (const ConfigMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
